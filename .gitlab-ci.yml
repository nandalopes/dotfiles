---
.defaults:
  rules: &defaultRules
    - if: $CI_PIPELINE_SOURCE =~ /(api|web*|schedule|trigger|pipeline)/
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH &&
          $CI_OPEN_MERGE_REQUESTS &&
          $CI_PIPELINE_SOURCE == "push"
      when: never
    - *defaultRules
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH =~ /mine/

default:
  interruptible: true
  timeout: 10m
  cache: &defaultCache
    key: $CI_COMMIT_REF_SLUG
    fallback_keys:
      - $CI_DEFAULT_BRANCH
    #when: on_failure
    paths:
      - "root/bin/chezmoi"

variables:
  DEBIAN_FRONTEND:
    value: "noninteractive"
    description: "Run apt and chezmoi non interactive"
  MY_CHEZMOI_BIN: "./root/bin/chezmoi"
  MY_CHEZMOI_ROOT: "root/"

install-script:
  stage: test
  parallel:
    matrix:
      - UBUNTU_TAG:
        - ":20.04"
        - ":22.04"
        - ":24.04"
  image: "ubuntu$UBUNTU_TAG"
  variables:
    LANGUAGE: en_US.UTF-8
    LANG: en_US.UTF-8
  rules:
    - &encryptedRule
      if: $CI_PIPELINE_SOURCE == "push"
      when: never
      changes:
        paths:
          - "$MY_CHEZMOI_ROOT**/*encrypted_*"
    - *defaultRules
    - if: $CI_PIPELINE_SOURCE == "push"
      changes:
        paths:
          - .chezmoiroot
          - .chezmoiversion
          - .gitlab-ci.yml
          - install.sh
          - "$MY_CHEZMOI_ROOT**/.*"
          - "$MY_CHEZMOI_ROOT**/*"
  before_script:
    - apt-get update -qq
    - apt-get install -qqy
        locales
        lsb-release
        software-properties-common
    - (
        localedef -i ${LANGUAGE%\.*} -f ${LANGUAGE#*\.} $LANGUAGE
        &&
        /usr/sbin/update-locale LANG=$LANG
      )
    - apt-get install -qqy
        curl
        git
        sudo
  script:
    - ./install.sh
    - $MY_CHEZMOI_BIN data --format yaml
    - $MY_CHEZMOI_BIN ignored
    - $MY_CHEZMOI_BIN managed -i all
    - (
        [ ! -d "${HOME}/.local/share/fonts" ]
        ||
        ls -lha ~/.local/share/fonts/**/*/
      )

docker-test:
  stage: test
  # Use the official docker image.
  image: docker:latest
  services:
    - docker:dind
  cache:
    []
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  allow_failure: true
  when: manual
  rules:
    - *defaultRules
    - if: $CI_PIPELINE_SOURCE == "push"
      when: on_success
      changes:
        paths:
          - .dockerignore
          - Dockerfile
          - compose.yaml
          - install.sh
    - if: $CI_PIPELINE_SOURCE == "push"
  before_script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    # - docker push "$CI_REGISTRY_IMAGE${tag}"
