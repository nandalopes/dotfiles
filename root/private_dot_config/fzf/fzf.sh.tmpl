# ------------------------------------------------------------------------
# FZF options

export FZF_ALT_C_COMMAND="command find -L . -mindepth 1 \
\\( \
  -fstype 'sysfs' \
  -o -fstype 'devfs' \
  -o -fstype 'devtmpfs' \
  -o -fstype 'proc' \
\\) -prune -o \
\\( \
  -path '*/\\.git' \
  -o -path '*/node_modules' \
  -o -path '*/target' \
  -o -path '*/dist' \
\\) -prune -o \
-type d -print 2> /dev/null | cut -b3-"
export FZF_ALT_C_OPTS='--preview "tree -n {} | head -$FZF_PREVIEW_LINES" --bind "?:toggle-preview"'

export FZF_CTRL_R_OPTS="--preview 'echo {}' \
  --preview-window down:3:wrap \
  --bind '?:toggle-preview'"

export FZF_CTRL_T_COMMAND=
  {{- if lookPath "rg" -}}
'command rg --files --hidden --follow --no-ignore-vcs --no-messages \
  --glob "!**/.git/{*/*,COMMIT*,*HEAD,MERGE*,index,*refs,shallow}"'
  {{- else -}}
"command find -L . -mindepth 1 \
\\( \
  -fstype 'sysfs' \
  -o -fstype 'devfs' \
  -o -fstype 'devtmpfs' \
  -o -fstype 'proc' \
\\) \
-prune -o \
\\( \
  -path '*/\\.git/*/*' \
  -o -path '*/node_modules' \
  -o -path '*/target' \
  -o -path '*/dist' \
\\) \
-prune -o \
\\( \
  -type f \
  -o -type l \
\\) \
-print 2> /dev/null | cut -b3-"
  {{- end }}
export FZF_CTRL_T_OPTS='--preview "cat {} | head -$FZF_PREVIEW_LINES" --bind "?:toggle-preview"'


# ------------------------------------------------------------------------
# [ASDF](https://github.com/junegunn/fzf/wiki/Examples#asdf)

# Install one or more versions of specified language
# e.g. `vmi rust` # => fzf multimode, tab to mark, enter to install
# if no plugin is supplied (e.g. `vmi<CR>`), fzf will list them for you
# Mnemonic [V]ersion [M]anager [I]nstall
vmi() {
  local lang=${1}

  if [[ ! $lang ]]; then
    lang=$(asdf plugin list | fzf --height=~5)
  fi

  if [[ $lang ]]; then
    local versions=$(asdf list all $lang | fzf --height=~30% --no-sort --tac --multi)
    if [[ ${#versions[@]} -gt 0 ]]; then
      echo $versions[@] | xargs -rtn1 asdf install $lang
    fi
  fi
}

# Remove one or more versions of specified language
# e.g. `vmi rust` # => fzf multimode, tab to mark, enter to remove
# if no plugin is supplied (e.g. `vmi<CR>`), fzf will list them for you
# Mnemonic [V]ersion [M]anager [C]lean
vmc() {
  local lang=${1}

  if [[ ! $lang ]]; then
    lang=$(asdf plugin list | fzf --height=~5)
  fi

  if [[ $lang ]]; then
    local versions=$(asdf list $lang | sed 's/^[ *]*//' | fzf --height=~30% --multi)
    if [[ ${#versions[@]} -gt 0 ]]; then
      echo $versions[@] | xargs -rpn1 asdf uninstall $lang
    fi
  fi
}


# ------------------------------------------------------------------------
# tmux

# tmuxp profiles
ftmux() {
  local tprofiles

  tprofiles=( $(tmuxp ls | fzf --height=5 --multi --query="$*") )

  if [[ -z "$tprofiles" ]]; then
    tmux ls
    tmuxp ls
  else
    tmuxp load "${tprofiles[@]}"
  fi
}

# ftpane - switch pane (@george-b)
ftpane() {
  local panes current_window current_pane target target_window target_pane
  panes=$(tmux list-panes -s -F '#I:#P - #{pane_current_path} #{pane_current_command}')
  current_pane=$(tmux display-message -p '#I:#P')
  current_window=$(tmux display-message -p '#I')

  target=$(echo "$panes" | grep -v "$current_pane" | fzf +m --reverse) || return

  target_window=$(echo $target | awk 'BEGIN{FS=":|-"} {print$1}')
  target_pane=$(echo $target | awk 'BEGIN{FS=":|-"} {print$2}' | cut -c 1)

  if [[ $current_window -eq $target_window ]]; then
    tmux select-pane -t ${target_window}.${target_pane}
  else
    tmux select-pane -t ${target_window}.${target_pane} &&
    tmux select-window -t $target_window
  fi
}

# In tmux.conf
# bind-key 0 run "tmux split-window -l 12 'bash -ci ftpane'"

# ------------------------------------------------------------------------
# fasd

av() {
  local files
  files=( $(fasd -Rfl $* | fzf --query="$*" -1 --height=~10 --no-sort -m) ) && ${VISUAL:-$EDITOR} "${files[@]}" || return 1
}

if type j >/dev/null 2>&1; then
  unalias j
fi
j() {
  local dir
  dir="$(fasd -Rdl $* | fzf --query="$*" -1 --height=~10 --no-sort +m)" && cd "${dir}" || return 1
}
alias z=j
alias zz=j


# ------------------------------------------------------------------------
# process

# fkill - kill processes - list only the ones you can kill. Modified the earlier script.
fkill() {
  local pid
  if [[ "$UID" != "0" ]]; then
    pid=$(ps -f -u $UID | sed 1d | fzf --height=40% -m | awk '{print $2}')
  else
    pid=$(ps -ef | sed 1d | fzf --height=40% -m | awk '{print $2}')
  fi

  if [[ "x$pid" != "x" ]]; then
    echo $pid | xargs kill -${1:-9}
  fi
}

# vim: ft=sh:

{{- /*
  # vim: ft=sh.gotmpl:
    */}}
